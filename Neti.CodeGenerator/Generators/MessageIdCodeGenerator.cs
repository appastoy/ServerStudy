using System;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Neti.Scheme;

namespace Neti.CodeGenerator.Generators
{
	public class MessageIdCodeGenerator : ICodeGenerator
	{
		public string Generate(Type type)
		{
			if (type is null)
			{
				throw new ArgumentNullException(nameof(type));
			}

			var attribute = type.GetCustomAttribute<MessageGroupAttribute>();
			if (attribute == null)
			{
				throw new ArgumentException(nameof(type));
			}

			var startId = attribute.StartId;
			var messageIds = type.GetMethods()
								 .Select(method => (method.Name, Value: startId++))
								 .ToArray();

			return GenerateMessageIdCode(type, messageIds);
		}

		public Task<string> GenerateAsync(Type type)
		{
			return Task.Run(() => Generate(type));
		}

		string GenerateMessageIdCode(Type messageGroupType, (string Name, ushort Value)[] messageIds)
		{
			var messageIdDeclaringCodes = messageIds.Select(id => $"public const ushort {id.Name} = {id.Value};");
			var messageIdCode = string.Join($"{Environment.NewLine}			", messageIdDeclaringCodes);

			var code =
$@"{Global.AutoGeneratedHeader}

namespace {messageGroupType.Namespace}
{{
	public static partial class MessageId
	{{
		public static class {messageGroupType.Name}
		{{
			{messageIdCode}
		}}
	}}
}}";

			return code;
		}
	}
}
