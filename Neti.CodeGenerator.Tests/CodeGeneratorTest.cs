using FluentAssertions;
using Neti.CodeGenerator.Generators;
using Neti.Scheme;
using NUnit.Framework;

namespace Neti.Mock
{
	[MessageGroupToServer(100)]
	interface MockMessageGroup
	{
		void MockMethod1(bool p4, char p5, string p6);
		void MockMethod3(sbyte p7, short p8, int p9, long p10);
		void MockMethod2(byte p11, ushort p12, uint p13, ulong p14);
		void MockMethod0(float p15, double p16, decimal p17);
	}
}

namespace Neti.CodeGenerator.Tests
{
	public class CodeGeneratorTest
	{
		[Test]
		public void MessageIdCodeGenerateTest()
		{
			string expectedMessageIdCode =
$@"{CodeConstants.AutoGeneratedHeader}

// No using

namespace Neti.Mock
{{
	public static partial class MockMessageGroup
	{{
		public static class MessageId
		{{
			public const ushort MockMethod1 = 100;
			public const ushort MockMethod3 = 101;
			public const ushort MockMethod2 = 102;
			public const ushort MockMethod0 = 103;
		}}
	}}
}}";

			var generator = new MessageIdCodeGenerator();
			generator.Generate(typeof(Mock.MockMessageGroup)).Should().Be(expectedMessageIdCode);
			generator.GenerateAsync(typeof(Mock.MockMessageGroup)).Result.Should().Be(expectedMessageIdCode);
		}

		[Test]
		public void RpcCodeGenerateTest()
		{
			string expectedRpcCode =
$@"{CodeConstants.AutoGeneratedHeader}

// No using

namespace Neti.Mock
{{
	public static partial class MockMessageGroup
	{{
		public static class Rpc
		{{
			public void MockMethod1(TcpClient sender, bool p4, char p5, string p6)
			{{
				using (var writer = sender.CreatePacketWriter())
				{{
					writer.Write(MessageId.MockMethod1);
					writer.Write(p4);
					writer.Write(p5);
					writer.Write(p6);
				}}
			}}
			
			public void MockMethod3(TcpClient sender, sbyte p7, short p8, int p9, long p10)
			{{
				using (var writer = sender.CreatePacketWriter())
				{{
					writer.Write(MessageId.MockMethod3);
					writer.Write(p7);
					writer.Write(p8);
					writer.Write(p9);
					writer.Write(p10);
				}}
			}}
			
			public void MockMethod2(TcpClient sender, byte p11, ushort p12, uint p13, ulong p14)
			{{
				using (var writer = sender.CreatePacketWriter())
				{{
					writer.Write(MessageId.MockMethod2);
					writer.Write(p11);
					writer.Write(p12);
					writer.Write(p13);
					writer.Write(p14);
				}}
			}}
			
			public void MockMethod0(TcpClient sender, float p15, double p16, decimal p17)
			{{
				using (var writer = sender.CreatePacketWriter())
				{{
					writer.Write(MessageId.MockMethod0);
					writer.Write(p15);
					writer.Write(p16);
					writer.Write(p17);
				}}
			}}
		}}
	}}
}}";

			var generator = new RpcCodeGenerator();
			generator.Generate(typeof(Mock.MockMessageGroup)).Should().Be(expectedRpcCode);
			generator.GenerateAsync(typeof(Mock.MockMessageGroup)).Result.Should().Be(expectedRpcCode);
		}
	}
}