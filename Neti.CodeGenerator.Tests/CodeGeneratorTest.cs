using FluentAssertions;
using Neti.CodeGenerator.Generators;
using Neti.Scheme;
using NUnit.Framework;

namespace Neti.Mock
{
	[MessageGroupToServer(100)]
	interface MockMessageGroup
	{
		void MockMethod1();
		void MockMethod3();
		void MockMethod2();
	}
}

namespace Neti.CodeGenerator.Tests
{
	public class CodeGeneratorTest
	{
		
		[Test]
		public void MessageIdCodeGenerateTest()
		{
			string expectedMessageIdCode =
$@"{Global.AutoGeneratedHeader}

namespace Neti.Mock
{{
	public static partial class MessageId
	{{
		public static class MockMessageGroup
		{{
			public const ushort MockMethod1 = 100;
			public const ushort MockMethod3 = 101;
			public const ushort MockMethod2 = 102;
		}}
	}}
}}";

			var generator = new MessageIdCodeGenerator();
			generator.Generate(typeof(Mock.MockMessageGroup)).Should().Be(expectedMessageIdCode);
			generator.GenerateAsync(typeof(Mock.MockMessageGroup)).Result.Should().Be(expectedMessageIdCode);
		}
	}
}